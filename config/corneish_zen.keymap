/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define QWERTY 0
#define COLEMAK 1
#define NUMBER 2
#define SYMBOL 3
#define NAVIGATE 4
#define MEDIA 5

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_brc {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&mt RBRC LBRC>;
            layers = <2>;
        };

        combo_bkt {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&mt RBKT LBKT>;
            layers = <2>;
        };
    };
};

/ {
    ltt: ltt {
        compatible = "zmk,behavior-hold-tap";
        label = "LTT";
        bindings = <&lt>, <&kp>;

        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
    };

    mtt: mtt {
        compatible = "zmk,behavior-hold-tap";
        label = "MTT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
    };

    rh_pht: rh_pht {
        compatible = "zmk,behavior-hold-tap";
        label = "RH_PHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <100>;
        quick-tap-ms = <200>;
        flavor = "tap-unless-interrupted";
        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 6 7 8 9 10 11 18 23 30 31 32 33 34 35>;
        require-prior-idle-ms = <125>;
    };

    lh_pht: lh_pht {
        compatible = "zmk,behavior-hold-tap";
        label = "LH_PHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <100>;
        quick-tap-ms = <200>;
        flavor = "tap-unless-interrupted";
        hold-trigger-key-positions = <0 2 3 4 5 12 17 24 25 26 27 28 29 6 7 8 9 10 11 18 23 30 31 32 33 34 35 19 20 21 22 23 1>;
        require-prior-idle-ms = <125>;
    };
};

/ {
    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // |  ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LS(LA(LC(LGUI))) TAB  &kp Q            &kp W           &kp E           &kp R            &kp T        &kp Y     &kp U            &kp I           &kp O           &kp P               &kp BSLH
&mt LS(LA(LCTRL)) ESC     &lh_pht LCTRL A  &lh_pht LALT S  &lh_pht LGUI D  &lh_pht LSHFT F  &kp G        &kp H     &rh_pht LSHFT J  &rh_pht LGUI K  &rh_pht LALT L  &rh_pht LCTRL SEMI  &kp SQT
&kp LC(LGUI)              &kp Z            &kp X           &kp C           &kp V            &kp B        &kp N     &kp M            &kp COMMA       &kp DOT         &kp FSLH            &kp RET
                                                           &mo 2           &mo 1            &kp SPACE    &kp BSPC  &mo 3            &ltt 4 DEL
            >;
        };

        number_layer {
            display-name = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |  `  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      | BKSP
            // |  -  | SHFT| CTRL| GUI | GUI |  =  |   |     | GUI | ALT | CTRL| SHFT|      |
            // |  ,  |     |     |     |     |     |   |     |     |     |     |     |      |
            //                   |     |     |SPACE|   |     |     |     |

            bindings = <
&kp GRAVE  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5        &kp N6      &kp N7      &kp N8      &kp N9      &kp N0     &none
&trans     &kp LCTRL   &kp LALT    &kp LGUI    &kp LSHFT   &none         &none       &kp LSHFT   &kp LGUI    &kp LALT    &kp LCTRL  &none
&trans     &kp LC(N1)  &kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp LC(N5)    &kp LC(N6)  &kp LC(N7)  &kp LC(N8)  &kp LC(N9)  &none      &none
                                   &none       &none       &none         &none       &none       &none
            >;
        };

        symbol_layer {
            display-name = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |  ~  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // |  ;  |  :  |  _  |  "  |  =  |  +  |   |     | GUI | ALT | CTRL| SHFT|  \   |
            // |     |     |     |     |     |  |  |   |     |     |     |     |     |      |
            //                    |     |     |SPACE|   | ENT |     |    |

            bindings = <
&kp TILDE  &kp EXCL        &kp AT          &kp POUND       &kp DLLR        &kp PRCNT         &kp CARET       &kp AMPS        &kp ASTRK       &kp LPAR        &kp RPAR   &none
&trans     &kp LCTRL       &kp LALT        &kp LGUI        &kp LSHFT       &kp MINUS         &kp EQUAL       &kp LSHFT       &kp LGUI        &kp LALT        &kp LCTRL  &kp PLUS
&trans     &kp LC(LG(N1))  &kp LC(LG(N2))  &kp LC(LG(N3))  &kp LC(LG(N4))  &kp LC(LG(N5))    &kp LC(LG(N6))  &kp LC(LG(N7))  &kp LC(LG(N8))  &kp LC(LG(N9))  &none      &none
                                           &none           &none           &none             &none           &none           &none
            >;
        };

        navigate_layer {
            display-name = "NAVIGATE";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none   &kp LC(N1)     &kp LC(N2)  &kp LC(N3)    &kp LC(N4)     &kp LC(N5)       &kp LC(N6)    &kp LC(N7)  &kp UP     &none      &none    &none
&trans  &kp LCTRL      &kp LALT    &kp LGUI      &kp LSHFT      &none            &none         &kp LEFT    &kp DOWN   &kp RIGHT  &none    &none
&trans  &kp C_AC_UNDO  &none       &kp C_AC_CUT  &kp C_AC_COPY  &kp C_AC_REDO    &kp C_AC_INS  &kp HOME    &kp PG_DN  &kp PG_UP  &kp END  &none
                                   &none         &none          &none            &none         &none       &none
            >;
        };

        media_layer {
            display-name = "MEDIA";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&rgb_ug RGB_TOG    &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF    &none         &none         &none         &none         &none         &none
&ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFR    &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &none         &none
&none              &none            &none            &none            &none            &none              &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                                     &none            &none            &none              &kp C_PP      &kp C_MUTE    &none
            >;
        };
    };
};
