/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
// --------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R  &kp T   &kp Y  &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp ESC    &kp A  &kp S  &kp D  &kp F  &kp G   &kp H  &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B   &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
          &kp LGUI  &mt LALT SPACE  &kp LGUI   &mt RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            display-name = "NUMBER";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
&kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                                  &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                                 &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &trans
&kp LSHFT  &rgb_ug RGB_OFF   &rgb_ug RGB_ON  &ext_power EP_OFF  &ext_power EP_ON  &rgb_ug RGB_EFF            &rgb_ug RGB_EFR        &rgb_ug RGB_SPI   &rgb_ug RGB_BRI   &rgb_ug RGB_BRD    &trans &none
                                     &kp LGUI     &trans       &kp SPACE                                        &kp RET  &trans   &kp RALT
            >;
        };
    };
};

/ {
    combos {
        // Symbols / Operations
        compatible = "zmk,combos";
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <4 5>; // KP: RT
            bindings = <&mt RBKT LBKT>; // ][ // 可以用CMD+这个单手返回到代码上一个编辑的地方 或者网页返回
            layers = <0 1 2 3 4 5>;
        };
        combo_tag {
            timeout-ms = <50>;
            key-positions = <3 4>; // KP: er
            bindings = <&mt GREATER_THAN LESS_THAN>; // > < // 由于上面的[](){}都可以用左手单手输入了，所以加一个同样原理的<> 方便html写tag
            layers = <0 1 2 3 4 5>;
        }; 
        combo_js_lt {
            timeout-ms = <100>; // 因为同时按三个键，所以时间稍微调长一些，按照个人习惯调整。
            key-positions = <27 28 29>; // KP: xc
            bindings = <¯o_js_tl>; // (`${}`) // 常用符号组合，由于28 29可以输出{}，因此加一个27输出这个符号组合非常合理好记
            layers = <0 1 2 3 4 5>;
        };
    };
};
